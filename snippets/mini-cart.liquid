<!--
  Snippet: Mini Cart
  Descrição: Cart drawer que desliza da direita

  Uso:
  {% render 'mini-cart' %}
-->

<style>
  .mini-cart {
    position: fixed;
    top: 0;
    right: -450px;
    width: 100%;
    max-width: 450px;
    height: 100vh;
    background: #000000;
    border-left: 1px solid rgba(255, 255, 255, 0.1);
    z-index: 9999;
    display: flex;
    flex-direction: column;
    transition: right 0.3s ease;
  }

  .mini-cart.active {
    right: 0;
  }

  .mini-cart__overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.8);
    z-index: 9998;
    display: none;
  }

  .mini-cart__overlay.active {
    display: block;
  }

  .mini-cart__header {
    padding: 24px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .mini-cart__title {
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--color-brand-yellow);
  }

  .mini-cart__close {
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 50%;
    color: #FFFFFF;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .mini-cart__close:hover {
    background: rgba(218, 241, 13, 0.1);
    border-color: var(--color-brand-yellow);
    color: var(--color-brand-yellow);
  }

  .mini-cart__body {
    flex: 1;
    overflow-y: auto;
    padding: 24px;
  }

  .mini-cart__items {
    display: flex;
    flex-direction: column;
    gap: 16px;
    margin-bottom: 24px;
  }

  .mini-cart__empty {
    text-align: center;
    padding: 60px 24px;
  }

  .mini-cart__empty-icon {
    width: 80px;
    height: 80px;
    margin: 0 auto 24px;
    color: var(--color-text-subdued);
    opacity: 0.5;
  }

  .mini-cart__empty-text {
    font-size: 1rem;
    color: var(--color-text-subdued);
    margin-bottom: 24px;
  }

  .mini-cart__footer {
    padding: 24px;
    border-top: 1px solid rgba(255, 255, 255, 0.1);
    background: rgba(255, 255, 255, 0.02);
  }

  .mini-cart__subtotal {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 16px;
  }

  .mini-cart__subtotal-label {
    font-size: 1rem;
    color: var(--color-text-subdued);
  }

  .mini-cart__subtotal-value {
    font-size: 1.25rem;
    font-weight: 700;
    color: var(--color-brand-yellow);
  }

  .mini-cart__note {
    font-size: 0.75rem;
    color: var(--color-text-subdued);
    text-align: center;
    margin-bottom: 16px;
  }

  .mini-cart__checkout-btn {
    width: 100%;
    padding: 16px 24px;
    background: var(--color-brand-yellow);
    color: #000000;
    border: none;
    border-radius: 8px;
    font-size: 1rem;
    font-weight: 700;
    cursor: pointer;
    transition: all 0.3s ease;
    margin-bottom: 12px;
  }

  .mini-cart__checkout-btn:hover {
    opacity: 0.9;
    transform: translateY(-2px);
  }

  .mini-cart__view-cart {
    width: 100%;
    padding: 12px 24px;
    background: none;
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 8px;
    color: #FFFFFF;
    font-size: 0.875rem;
    text-align: center;
    text-decoration: none;
    display: block;
    transition: all 0.3s ease;
  }

  .mini-cart__view-cart:hover {
    border-color: var(--color-brand-yellow);
    color: var(--color-brand-yellow);
    background: rgba(218, 241, 13, 0.05);
  }

  @media (max-width: 768px) {
    .mini-cart {
      max-width: 100%;
      right: -100%;
    }
  }
</style>

<div class="mini-cart__overlay" data-mini-cart-overlay></div>

<div class="mini-cart" data-mini-cart>
  <div class="mini-cart__header">
    <h2 class="mini-cart__title">{{ 'cart.general.title' | t }}</h2>
    <button class="mini-cart__close" data-mini-cart-close aria-label="{{ 'cart.general.close' | t }}">
      <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <line x1="18" y1="6" x2="6" y2="18"></line>
        <line x1="6" y1="6" x2="18" y2="18"></line>
      </svg>
    </button>
  </div>

  <div class="mini-cart__body">
    <div class="mini-cart__content" data-mini-cart-content>
      {%- if cart.item_count > 0 -%}
        <div class="mini-cart__items" data-mini-cart-items>
          {%- for item in cart.items -%}
            {%- render 'line-item', item: item, index: forloop.index -%}
          {%- endfor -%}
        </div>
      {%- else -%}
        <div class="mini-cart__empty">
          <svg class="mini-cart__empty-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1">
            <circle cx="9" cy="21" r="1"></circle>
            <circle cx="20" cy="21" r="1"></circle>
            <path d="M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"></path>
          </svg>
          <p class="mini-cart__empty-text">{{ 'cart.general.empty' | t }}</p>
          <a href="{{ routes.all_products_collection_url }}" class="btn btn-primary" data-mini-cart-close>
            {{ 'cart.general.continue_shopping' | t }}
          </a>
        </div>
      {%- endif -%}
    </div>
  </div>

  {%- if cart.item_count > 0 -%}
    <div class="mini-cart__footer">
      <div class="mini-cart__subtotal">
        <span class="mini-cart__subtotal-label">{{ 'cart.general.subtotal' | t }}</span>
        <span class="mini-cart__subtotal-value" data-mini-cart-total>{{ cart.total_price | money }}</span>
      </div>

      <p class="mini-cart__note">{{ 'cart.general.taxes_notice' | t }}</p>

      <button
        type="button"
        class="mini-cart__checkout-btn"
        onclick="window.location.href='/checkout'"
      >
        {{ 'cart.general.checkout' | t }}
      </button>

      <a href="{{ routes.cart_url }}" class="mini-cart__view-cart">
        {{ 'cart.general.view_cart' | t }}
      </a>
    </div>
  {%- endif -%}
</div>

<script>
  (function() {
    const miniCart = document.querySelector('[data-mini-cart]');
    const overlay = document.querySelector('[data-mini-cart-overlay]');
    const closeBtn = document.querySelector('[data-mini-cart-close]');
    const cartItems = document.querySelector('[data-mini-cart-items]');

    if (!miniCart) return;

    // Open mini cart
    window.openMiniCart = function() {
      miniCart.classList.add('active');
      overlay.classList.add('active');
      document.body.style.overflow = 'hidden';
    };

    // Close mini cart
    function closeMiniCart() {
      miniCart.classList.remove('active');
      overlay.classList.remove('active');
      document.body.style.overflow = '';
    }

    if (closeBtn) {
      closeBtn.addEventListener('click', closeMiniCart);
    }

    if (overlay) {
      overlay.addEventListener('click', closeMiniCart);
    }

    // Update mini cart on cart changes
    document.addEventListener('cart:updated', async (e) => {
      const cart = e.detail.cart;

      // Refresh mini cart content
      try {
        const response = await fetch(window.location.href);
        const html = await response.text();
        const parser = new DOMParser();
        const doc = parser.parseFromString(html, 'text/html');
        const newContent = doc.querySelector('[data-mini-cart-content]');

        if (newContent) {
          const currentContent = document.querySelector('[data-mini-cart-content]');
          if (currentContent) {
            currentContent.innerHTML = newContent.innerHTML;
          }
        }

        // Update total
        const totalElement = document.querySelector('[data-mini-cart-total]');
        if (totalElement && cart.total_price !== undefined) {
          totalElement.textContent = Shopify.formatMoney(cart.total_price);
        }
      } catch (error) {
        console.error('Error updating mini cart:', error);
      }
    });

    // Handle line item interactions
    if (cartItems) {
      cartItems.addEventListener('click', async (e) => {
        // Increase quantity
        const increaseBtn = e.target.closest('[data-qty-increase]');
        if (increaseBtn) {
          const key = increaseBtn.dataset.key;
          const item = increaseBtn.closest('[data-line-item]');
          const currentQty = parseInt(item.querySelector('[data-qty-value]').textContent);
          await updateCartItem(key, currentQty + 1);
          return;
        }

        // Decrease quantity
        const decreaseBtn = e.target.closest('[data-qty-decrease]');
        if (decreaseBtn && !decreaseBtn.disabled) {
          const key = decreaseBtn.dataset.key;
          const item = decreaseBtn.closest('[data-line-item]');
          const currentQty = parseInt(item.querySelector('[data-qty-value]').textContent);
          if (currentQty > 1) {
            await updateCartItem(key, currentQty - 1);
          }
          return;
        }

        // Remove item
        const removeBtn = e.target.closest('[data-remove-item]');
        if (removeBtn) {
          const key = removeBtn.dataset.key;
          await updateCartItem(key, 0);
          return;
        }
      });
    }

    async function updateCartItem(key, quantity) {
      try {
        const response = await fetch('/cart/change.js', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ id: key, quantity: quantity })
        });

        if (!response.ok) throw new Error('Failed to update cart');

        const cart = await response.json();
        document.dispatchEvent(new CustomEvent('cart:updated', { detail: { cart } }));
      } catch (error) {
        console.error('Error updating cart item:', error);
        alert('Failed to update cart');
      }
    }
  })();
</script>
