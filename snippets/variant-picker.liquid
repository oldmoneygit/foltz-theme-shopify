<!--
  Snippet: Variant Picker
  Descrição: Seletor de variantes de produto (tamanhos, cores, etc.) com design FOLTZ

  Uso:
  {% render 'variant-picker', product: product, block: block %}
-->

<style>
  .variant-picker {
    margin-bottom: 0;
  }

  .variant-picker__option {
    margin-bottom: 0;
  }

  .variant-picker__label-wrapper {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 12px;
  }

  .variant-picker__label {
    font-size: 0.875rem;
    font-weight: 700;
    color: #FFFFFF;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .variant-picker__selected {
    font-size: 0.875rem;
    font-weight: 700;
    color: #DAF10D;
  }

  .variant-picker__buttons {
    display: grid;
    grid-template-columns: repeat(6, 1fr);
    gap: 8px;
  }

  .variant-picker__button {
    position: relative;
    min-width: 0;
    padding: 12px 8px;
    background: rgba(255, 255, 255, 0.05);
    border: none;
    border-radius: 12px;
    color: #FFFFFF;
    font-size: 0.875rem;
    font-weight: 700;
    cursor: pointer;
    transition: all 0.2s ease;
    text-align: center;
  }

  .variant-picker__button:hover:not(:disabled) {
    background: rgba(255, 255, 255, 0.1);
    transform: scale(1.05);
  }

  .variant-picker__button:checked + .variant-picker__button,
  input[type="radio"]:checked + .variant-picker__button {
    background: #DAF10D;
    color: #000000;
    box-shadow: 0 4px 12px rgba(218, 241, 13, 0.2);
    transform: scale(1.05);
  }

  .variant-picker__button:disabled {
    opacity: 0.3;
    cursor: not-allowed;
    text-decoration: line-through;
  }

  /* Active state indicator */
  input[type="radio"]:checked + .variant-picker__button::after {
    content: '';
    position: absolute;
    top: -4px;
    right: -4px;
    width: 12px;
    height: 12px;
    background: #10B981;
    border-radius: 50%;
    border: 2px solid #000000;
  }

  /* Size Guide Link */
  .variant-picker__size-guide {
    display: inline-flex;
    align-items: center;
    gap: 6px;
    color: rgba(218, 241, 13, 0.8);
    font-size: 0.75rem;
    font-weight: 600;
    margin-top: 8px;
    cursor: pointer;
    transition: color 0.2s ease;
    background: none;
    border: none;
    padding: 0;
  }

  .variant-picker__size-guide:hover {
    color: #DAF10D;
  }

  .variant-picker__size-guide svg {
    width: 14px;
    height: 14px;
    transition: transform 0.2s ease;
  }

  .variant-picker__size-guide:hover svg {
    transform: scale(1.1);
  }

  .variant-picker__size-guide span {
    text-decoration: underline;
  }
</style>

{%- unless product.has_only_default_variant -%}
  <variant-selector data-url="{{ product.url }}" data-section-id="{{ section.id }}">
    {%- for option in product.options_with_values -%}
      <fieldset class="variant-picker__option">
        <div class="variant-picker__label-wrapper">
          <legend class="variant-picker__label">{{ option.name }}:</legend>
          <span class="variant-picker__selected">{{ option.selected_value }}</span>
        </div>

        <div class="variant-picker__buttons">
          {%- for value in option.values -%}
            <input
              type="radio"
              id="{{ section.id }}-{{ option.position }}-{{ forloop.index0 }}"
              name="{{ option.name }}"
              value="{{ value | escape }}"
              form="{{ product_form_id }}"
              {% if option.selected_value == value %}checked{% endif %}
              style="position: absolute; opacity: 0; pointer-events: none;"
            >
            <label
              for="{{ section.id }}-{{ option.position }}-{{ forloop.index0 }}"
              class="variant-picker__button"
            >
              {{ value }}
            </label>
          {%- endfor -%}
        </div>
      </fieldset>
    {%- endfor -%}

    <button type="button" class="variant-picker__size-guide">
      <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
        <circle cx="12" cy="10" r="3"></circle>
      </svg>
      <span>Guía de tallas</span>
    </button>

    <script type="application/json">
      {
        "variants": [
          {%- for variant in product.variants -%}
            {
              "id": {{ variant.id }},
              "available": {{ variant.available | json }},
              "option1": {{ variant.option1 | json }},
              "option2": {{ variant.option2 | json }},
              "option3": {{ variant.option3 | json }},
              "price": {{ variant.price }},
              "compare_at_price": {{ variant.compare_at_price | json }}
            }{% unless forloop.last %},{% endunless %}
          {%- endfor -%}
        ]
      }
    </script>
  </variant-selector>

  <script>
    if (!customElements.get('variant-selector')) {
      customElements.define('variant-selector', class VariantSelector extends HTMLElement {
        constructor() {
          super();
          this.variants = JSON.parse(this.querySelector('script[type="application/json"]').textContent).variants;
          this.addEventListener('change', this.onVariantChange.bind(this));
        }

        onVariantChange() {
          this.updateOptions();
          this.updateMasterId();
          this.updateSelectedText();

          if (!this.currentVariant) return;

          this.dispatchEvent(new CustomEvent('variant:changed', {
            bubbles: true,
            detail: { variant: this.currentVariant }
          }));
        }

        updateOptions() {
          this.options = Array.from(this.querySelectorAll('input[type="radio"]:checked'), (input) => input.value);
        }

        updateMasterId() {
          this.currentVariant = this.variants.find((variant) => {
            const variantOptions = [variant.option1, variant.option2, variant.option3].filter(Boolean);
            return variantOptions.every((option, index) => option === this.options[index]);
          });
        }

        updateSelectedText() {
          this.querySelectorAll('.variant-picker__option').forEach((fieldset, index) => {
            const selectedValue = this.options[index];
            const selectedText = fieldset.querySelector('.variant-picker__selected');
            if (selectedText) selectedText.textContent = selectedValue;
          });
        }
      });
    }
  </script>
{%- endunless -%}
