<!--
  Snippet: Variant Picker
  Descrição: Seletor de variantes de produto (tamanhos, cores, etc.) com design FOLTZ

  Uso:
  {% render 'variant-picker', product: product, block: block %}
-->

<style>
  .variant-picker {
    margin-bottom: 24px;
  }

  .variant-picker__option {
    margin-bottom: 24px;
  }

  .variant-picker__label-wrapper {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 12px;
  }

  .variant-picker__label {
    font-size: 0.875rem;
    font-weight: 600;
    color: var(--color-text-subdued);
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .variant-picker__selected {
    font-size: 0.875rem;
    font-weight: 600;
    color: var(--color-brand-yellow);
  }

  .variant-picker__buttons {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
  }

  .variant-picker__button {
    min-width: 60px;
    padding: 12px 16px;
    background: rgba(255, 255, 255, 0.05);
    border: 2px solid rgba(255, 255, 255, 0.1);
    border-radius: 8px;
    color: #FFFFFF;
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
    text-align: center;
  }

  .variant-picker__button:hover:not(:disabled) {
    border-color: rgba(218, 241, 13, 0.5);
    background: rgba(218, 241, 13, 0.05);
  }

  .variant-picker__button.active {
    border-color: var(--color-brand-yellow);
    background: var(--color-brand-yellow);
    color: #000000;
  }

  .variant-picker__button:disabled {
    opacity: 0.3;
    cursor: not-allowed;
    text-decoration: line-through;
  }

  .variant-picker__dropdown {
    position: relative;
  }

  .variant-picker__select {
    width: 100%;
    padding: 12px 40px 12px 16px;
    background: #FFFFFF;
    border: 2px solid #000000;
    border-radius: 8px;
    color: #000000;
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    appearance: none;
    transition: all 0.3s ease;
  }

  .variant-picker__select:focus {
    outline: none;
    border-color: var(--color-brand-yellow);
    box-shadow: 0 0 0 3px rgba(218, 241, 13, 0.1);
  }

  .variant-picker__dropdown::after {
    content: '';
    position: absolute;
    right: 16px;
    top: 50%;
    transform: translateY(-50%);
    width: 0;
    height: 0;
    border-left: 5px solid transparent;
    border-right: 5px solid transparent;
    border-top: 6px solid #000000;
    pointer-events: none;
  }

  .variant-picker__color-swatches {
    display: flex;
    flex-wrap: wrap;
    gap: 12px;
  }

  .variant-picker__color-swatch {
    width: 48px;
    height: 48px;
    border-radius: 50%;
    border: 3px solid rgba(255, 255, 255, 0.1);
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
  }

  .variant-picker__color-swatch:hover {
    border-color: rgba(218, 241, 13, 0.5);
    transform: scale(1.1);
  }

  .variant-picker__color-swatch.active {
    border-color: var(--color-brand-yellow);
    box-shadow: 0 0 0 2px rgba(218, 241, 13, 0.3);
  }

  .variant-picker__color-swatch.unavailable {
    opacity: 0.3;
    cursor: not-allowed;
  }

  .variant-picker__color-swatch.unavailable::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) rotate(45deg);
    width: 2px;
    height: 60px;
    background: #EF4444;
  }
</style>

{%- unless product.has_only_default_variant -%}
  <variant-selector data-url="{{ product.url }}" data-section-id="{{ section.id }}">
    {%- for option in product.options_with_values -%}
      <fieldset class="variant-picker__option">
        <div class="variant-picker__label-wrapper">
          <legend class="variant-picker__label">{{ option.name }}:</legend>
          <span class="variant-picker__selected">{{ option.selected_value }}</span>
        </div>

        <div class="variant-picker__buttons">
          {%- for value in option.values -%}
            <input
              type="radio"
              id="{{ section.id }}-{{ option.position }}-{{ forloop.index0 }}"
              name="{{ option.name }}"
              value="{{ value | escape }}"
              form="{{ product_form_id }}"
              {% if option.selected_value == value %}checked{% endif %}
              style="position: absolute; opacity: 0; pointer-events: none;"
            >
            <label
              for="{{ section.id }}-{{ option.position }}-{{ forloop.index0 }}"
              class="variant-picker__button"
            >
              {{ value }}
            </label>
          {%- endfor -%}
        </div>
      </fieldset>
    {%- endfor -%}

    <script type="application/json">
      {
        "variants": [
          {%- for variant in product.variants -%}
            {
              "id": {{ variant.id }},
              "available": {{ variant.available | json }},
              "option1": {{ variant.option1 | json }},
              "option2": {{ variant.option2 | json }},
              "option3": {{ variant.option3 | json }},
              "price": {{ variant.price }},
              "compare_at_price": {{ variant.compare_at_price | json }}
            }{% unless forloop.last %},{% endunless %}
          {%- endfor -%}
        ]
      }
    </script>
  </variant-selector>

  <script>
    if (!customElements.get('variant-selector')) {
      customElements.define('variant-selector', class VariantSelector extends HTMLElement {
        constructor() {
          super();
          this.variants = JSON.parse(this.querySelector('script[type="application/json"]').textContent).variants;
          this.addEventListener('change', this.onVariantChange.bind(this));
        }

        onVariantChange() {
          this.updateOptions();
          this.updateMasterId();
          this.updateSelectedText();

          if (!this.currentVariant) return;

          this.dispatchEvent(new CustomEvent('variant:changed', {
            bubbles: true,
            detail: { variant: this.currentVariant }
          }));
        }

        updateOptions() {
          this.options = Array.from(this.querySelectorAll('input[type="radio"]:checked'), (input) => input.value);
        }

        updateMasterId() {
          this.currentVariant = this.variants.find((variant) => {
            const variantOptions = [variant.option1, variant.option2, variant.option3].filter(Boolean);
            return variantOptions.every((option, index) => option === this.options[index]);
          });
        }

        updateSelectedText() {
          this.querySelectorAll('.variant-picker__option').forEach((fieldset, index) => {
            const selectedValue = this.options[index];
            const selectedText = fieldset.querySelector('.variant-picker__selected');
            if (selectedText) selectedText.textContent = selectedValue;
          });
        }
      });
    }
  </script>
{%- endunless -%}
